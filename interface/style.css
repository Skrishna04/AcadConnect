body {
  font-family: Arial, sans-serif;
  background-color: #f9fafb;
}

.initials-placeholder {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 64px;
  height: 64px;
  background-color: #4f46e5;
  color: #ffffff;
  font-size: 2rem;
  font-weight: bold;
  border-radius: 50%;
}

button {
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  opacity: 0.9;
}












class Config:
    MYSQL_HOST = os.getenv('MYSQL_HOST', 'localhost')
    MYSQL_USER = os.getenv('MYSQL_USER', 'your_mysql_username')
    MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD', 'your_mysql_password')
    MYSQL_DB = os.getenv('MYSQL_DB', 'profileDB')




    


app = Flask(__name__)
app.config.from_object(Config)

# Initialize MySQL
mysql = MySQL(app)

# Enable CORS for all routes
CORS(app)

# Route to create a new profile
@app.route('/api/profile', methods=['POST'])
def create_profile():
    data = request.get_json()
    cursor = mysql.connection.cursor()
    cursor.execute(
        """
        INSERT INTO profiles (initials, name, college, course, bio, interests, email, location, social_links)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (data['initials'], data['name'], data['college'], data['course'], data['bio'], ','.join(data['interests']), data['email'], data['location'], ','.join(data['socialLinks']))
    )
    mysql.connection.commit()
    cursor.close()
    return jsonify({'message': 'Profile created'}), 201

# Route to get a profile by ID
@app.route('/api/profile/<profile_id>', methods=['GET'])
def get_profile(profile_id):
    cursor = mysql.connection.cursor()
    cursor.execute(
        """
        SELECT * FROM profiles WHERE id = %s
        """, (profile_id,)
    )
    profile = cursor.fetchone()
    if profile:
        result = {
            'id': profile[0],
            'initials': profile[1],
            'name': profile[2],
            'college': profile[3],
            'course': profile[4],
            'bio': profile[5],
            'interests': profile[6].split(','),
            'email': profile[7],
            'location': profile[8],
            'social_links': profile[9].split(',')
        }
        return jsonify(result)
    else:
        return jsonify({'message': 'Profile not found'}), 404

# Route to update a profile by ID
@app.route('/api/profile/<profile_id>', methods=['PUT'])
def update_profile(profile_id):
    data = request.get_json()
    cursor = mysql.connection.cursor()
    cursor.execute(
        """
        UPDATE profiles SET initials = %s, name = %s, college = %s, course = %s, bio = %s, interests = %s, email = %s, location = %s, social_links = %s WHERE id = %s
        """, (data['initials'], data['name'], data['college'], data['course'], data['bio'], ','.join(data['interests']), data['email'], data['location'], ','.join(data['socialLinks']), profile_id)
    )
    mysql.connection.commit()
    cursor.close()
    return jsonify({'message': 'Profile updated'}), 200

# Route to delete a profile by ID
@app.route('/api/profile/<profile_id>', methods=['DELETE'])
def delete_profile(profile_id):
    cursor = mysql.connection.cursor()
    cursor.execute(
        """
        DELETE FROM profiles WHERE id = %s
        """, (profile_id,)
    )
    mysql.connection.commit()
    cursor.close()
    return jsonify({'message': 'Profile deleted'}), 200